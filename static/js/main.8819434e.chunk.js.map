{"version":3,"sources":["mapForm.js","image-dots/Dot.js","image-dots/backdrop.js","mapcoords-only/InputModal.js","mapcoords-only/FileForm.js","mapcoords-only/ImageCoordinateCollector.js","mapcoords-only/MapCoordCollector.js","images.js","docs.js","about.js","App.js","reportWebVitals.js","index.js"],"names":["MapForm","props","handleDropdownChange","e","setState","val","target","value","handleFileChange","files","uploadedMap","url","URL","createObjectURL","name","handleStart","state","onSelect","onUpload","resorts","id","uploadedMapName","className","Container","Form","Label","Group","controlId","Control","as","onChange","this","map","resort","title","File","multiple","accept","src","alt","to","onClick","React","Component","Dot","onMouseDown","stopPropagation","moveDot","i","dotX","dotY","styles","dotRadius","style","height","width","transform","top","left","defaultProps","Backdrop","show","clicked","InputModal","onKeyPress","key","handleSave","handleInputChange","index","items","addAnother","newObj","shortName","areaId","deleteItem","filter","item","length","handleClose","currentDot","wW","window","innerWidth","posX","Math","round","Card","Body","Title","Row","column","Col","sm","type","defaultValue","x","updateCurrentDot","valueAsNumber","y","placeholder","autoFocus","Button","size","variant","Footer","FileForm","changeFileType","event","fileType","download","output","preventDefault","data","points","point","pisteMapCoordinates","JSON","stringify","contents","push","makeCSV","blob","Blob","fileDownloadUrl","dofileDownload","click","revokeObjectURL","upload","dofileUpload","content","csv","forEach","result","undefined","toString","replace","search","openFile","evt","fileObj","reader","FileReader","fileloaded","fileContents","json","parse","Array","isArray","loadPointData","hasOwnProperty","alert","bind","onload","readAsText","filename","fileNames","String","ref","href","ImageCoordinateCollector","onLoadPisteMap","img","dimensions","renderWidth","offsetWidth","renderHeight","offsetHeight","realWidth","naturalWidth","realHeight","naturalHeight","currentZoomLevel","onMouseUp","bounds","getBoundingClientRect","renderedToRealCoord","clientX","clientY","Object","keys","dot","grabbing","showModal","dots","indices","other","deleteDots","resetDots","coord","renderedLength","realLength","realToRenderedCoord","handleShowModal","handleCloseModal","saveDot","handleSelectZoom","prevState","parseInt","dim","backgroundImageUrl","grabClass","onLoad","boxShadow","backgroundColor","console","log","DropdownButton","z","Dropdown","Item","eventKey","active","imgSrc","Table","hover","pixelCoordinates","backgroundSize","MapCoordCollector","addDots","old","shouldBlockNavigation","newDots","obj","includes","initialDots","handleResize","windowWidth","onbeforeunload","addEventListener","removeEventListener","when","message","onLoadMap","images","Docs","About","App","setResort","choice","useGeoCoords","resortObject","uploadMap","file","substr","lastIndexOf","basename","Navbar","bg","Nav","Text","exact","path","pathname","from","location","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8819434e.chunk.js","sourcesContent":["import './styles/mapForm.css';\nimport React from 'react';\nimport {Container, Form} from 'react-bootstrap';\nimport {Link} from \"react-router-dom\";\n\nclass MapForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            val: this.props.resorts[0].id,\n            uploadedMap: null,\n            uploadedMapName: '',\n        }\n    }\n\n    handleDropdownChange = (e) => {\n        this.setState({val: e.target.value});\n    }\n\n    handleFileChange = (e) => {\n        if(e.target.files[0] == null) return;\n        this.setState({\n            uploadedMap: {\n                url: URL.createObjectURL(e.target.files[0]),\n                name: e.target.files[0].name\n            }\n        });\n    }\n\n    handleStart = () => {\n        let { uploadedMap, val } = this.state;\n        if(uploadedMap == null) {\n            this.props.onSelect(val);\n        } else {\n            this.props.onUpload(uploadedMap);\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"mapform\" >\n                <div className=\"vertical-center\">\n                    <Container className=\"selectcontainer\">\n                        <Form>\n                            <Form.Label className=\"form-title\">Welcome!</Form.Label>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Select or upload piste map</Form.Label>\n                                <Form.Control as=\"select\"\n                                onChange={this.handleDropdownChange}>\n                                {this.props.resorts.map((resort => (\n                                    <option key={resort.title} value={resort.id}>{resort.title}</option>\n                                )))}\n                                </Form.Control>\n                                <br/>\n                                <Form.File onChange={this.handleFileChange}\n                                multiple={false}\n                                accept=\"image/png, image/jpeg\"/>\n                                <br/>\n                                {this.state.uploadedMap ?\n                                    <div className=\"image-wrapper\">\n                                        <img src={this.state.uploadedMap.url} alt=\"preview\"/>\n                                        <br/><br/>\n                                    </div> : null }\n                                </Form.Group>\n                                <Link to=\"/matcher\" onClick={this.handleStart} className=\"btn btn-primary\">Start!</Link>\n                        </Form>\n                    </Container>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default MapForm;\n","import React from 'react';\n\nconst defaultProps = {\n  dotRadius: 1,\n};\n\nexport default class Dot extends React.Component {\n  onMouseDown = (e) => {\n      e.stopPropagation();\n      this.props.moveDot(this.props.i);\n  }\n\n  render() {\n    const { dotX, dotY, styles, dotRadius } = this.props;\n    return (\n      <div\n        className=\"react-image-dot\"\n        onMouseDown={this.onMouseDown}\n        style={{\n          ...styles,\n          height: dotRadius * 2,\n          width: dotRadius * 2,\n          transform: `translate(${-dotRadius}, ${-dotRadius})`,\n          top: dotY || 0,\n          left: dotX || 0\n        }}\n      />\n    );\n  }\n}\n\nDot.defaultProps = defaultProps;\n","\n\nconst Backdrop = (props) => (\n    props.show ? <div className=\"modal-backdrop\" onClick={props.clicked}></div> : null\n)\n\nexport default Backdrop;","import '../styles/geoCoordSelector.css';\nimport React from 'react';\nimport Backdrop from '../image-dots/backdrop.js';\nimport {Button, Form, Row, Col} from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\n\nclass InputModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: props.currentDot.items.length === 0 ? [{\n                id: '',\n                name: '',\n                shortName: '',\n                areaId: props.currentDot.areaId ? props.currentDot.areaId : ''\n            }] : props.currentDot.items\n        };\n    }\n\n    onKeyPress = (e) => {\n        if(e.key === 'Enter') {\n            this.props.handleSave(this.state);\n        }\n    }\n\n    handleInputChange = (e, index) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        let items = [...this.state.items];\n        let item = items[index];\n        item[name] = value;\n\n        this.setState({\n            items: items,\n        });\n    }\n\n    addAnother = () => {\n        let newObj = {\n            id: '',\n            name: '',\n            shortName: '',\n            areaId: this.state.items[0].areaId ? this.state.items[0].areaId : '',\n        };\n\n        this.setState({items: [...this.state.items, newObj ]});\n    }\n\n    deleteItem = (index) => {\n        let items = [...this.state.items];\n        items = items.filter((item, i) => i !== index);\n        this.setState({items: [...items]});\n        if(items.length === 0) {\n            this.props.handleClose();\n        }\n    }\n\n    render() {\n        const {handleClose} = this.props;\n        const wW = window.innerWidth;\n        var left = this.props.posX > wW/2 ? 0 : Math.round(wW*0.525);\n        return (\n            <div id=\"geoCoordSelector\">\n\n                    <div className=\"coord-selector\">\n                    <Backdrop show={true} clicked={() => this.props.handleSave(this.state)} />\n                    <Card className=\"modal-body\"\n                    style={{\n                        top: 10,\n                        left: left}}>\n                        <Card.Body className=\"card-body\">\n                            <Card.Title>Edit point data</Card.Title>\n                            <Form>\n                                <Form.Group as={Row}>\n                                    <Form.Label column>x</Form.Label>\n                                    <Col sm={4}>\n                                        <Form.Control type=\"number\" defaultValue={this.props.currentDot.x}\n                                        onChange={(e) => {this.props.updateCurrentDot({x: e.target.valueAsNumber})}}/>\n                                    </Col>\n                                    <Form.Label column>y</Form.Label>\n                                    <Col sm={4}>\n                                        <Form.Control type=\"number\" defaultValue={this.props.currentDot.y}\n                                        onChange={(e) => {this.props.updateCurrentDot({y: e.target.valueAsNumber})}}/>\n                                    </Col>\n                                </Form.Group>\n                                <hr/>\n                                <div className=\"items-list\">\n                                {this.state.items.map( (x, i) =>\n                                        <div className=\"dot-form-item\" key={i}>\n                                            <Form.Group as={Row}>\n                                                <Form.Label column >\n                                                  id\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                  <Form.Control type=\"text\"\n                                                  placeholder=\"Enter id...\"\n                                                  name=\"id\"\n                                                  value={x.id}\n                                                  onChange={(e) => this.handleInputChange(e, i)}\n                                                  autoFocus/>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row}>\n                                                <Form.Label column >\n                                                  name\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                  <Form.Control type=\"text\"\n                                                  placeholder=\"Enter name...\"\n                                                  name=\"name\"\n                                                  value={x.name}\n                                                  onChange={(e) => this.handleInputChange(e, i)}/>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row}>\n                                                <Form.Label column>\n                                                  shortName\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                  <Form.Control type=\"text\"\n                                                  placeholder=\"Enter shortName...\"\n                                                  name=\"shortName\"\n                                                  value={x.shortName}\n                                                  onChange={(e) => this.handleInputChange(e, i)}/>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row}>\n                                                <Form.Label column >\n                                                  areaId\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                  <Form.Control type=\"text\"\n                                                  placeholder=\"Enter areaId...\"\n                                                  name=\"areaId\"\n                                                  value={x.areaId}\n                                                  onChange={(e) => this.handleInputChange(e, i)}\n                                                  onKeyPress={this.onKeyPress} />\n                                                </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row}>\n                                                <Form.Label column >\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                <Button size=\"sm\" variant=\"outline-success\" className=\"float-right\" onClick={this.addAnother} >Add another</Button>\n                                                <Button size=\"sm\" variant=\"outline-danger\" className=\"float-right\" onClick={(e) => this.deleteItem(i)}>Delete</Button>\n                                                </Col>\n                                            </Form.Group>\n                                            <hr/>\n                                        </div>)}\n                                        </div>\n                            </Form>\n                        </Card.Body>\n                        <Card.Footer className=\"card-footer\">\n                            <Button variant=\"secondary\" onClick={handleClose}>Delete</Button>\n                            <Button variant=\"secondary\" onClick={() => this.props.handleSave(this.state)}>Close</Button>\n                            <Button variant=\"primary\" onClick={() => this.props.handleSave(this.state)}>Save</Button>\n                        </Card.Footer>\n                    </Card>\n                    </div>\n            </div>);\n    }\n}\n\nexport default InputModal;\n","import '../styles/fileForm.css';\nimport React from 'react';\nimport {Row, Form, Button} from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\n\nclass FileForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const defaultFileType = \"json\";\n        let filename  = this.props.title;\n\n        this.fileNames = {\n            json: String(filename) + \".json\",\n            csv: String(filename) + \".csv\",\n        }\n\n        this.state = {\n            fileType: defaultFileType,\n            fileDownloadUrl: null,\n            resort: filename,\n        }\n    }\n\n    changeFileType = (event) => {\n        const value = event.target.value;\n        this.setState({fileType: value});\n    }\n\n    download = (event) => {\n        event.preventDefault();\n        let output;\n        let data = this.props.points;\n        if (this.state.fileType === \"json\") {\n            let points = data.map(point => ({\n                id: point.id,\n                name: point.name,\n                shortName: point.shortName,\n                areaId: point.areaId,\n                pisteMapCoordinates: {x: point.x, y: point.y}\n            }));\n\n            output = JSON.stringify(points, null, 4);\n        } else if (this.state.fileType === \"csv\") {\n            let contents = [];\n            contents.push ([\"id\", \"name\", \"shortName\", \"areaId\", \"x\", \"y\"]);\n            data.map(point => contents.push([point.id, point.name, point.shortName, point.areaId, point.x, point.y]));\n            output = this.makeCSV(contents);\n        }\n        const blob = new Blob([output]);\n        const fileDownloadUrl = URL.createObjectURL(blob);\n        this.setState ({fileDownloadUrl: fileDownloadUrl},\n          () => {\n            this.dofileDownload.click();\n            URL.revokeObjectURL(fileDownloadUrl);\n            this.setState({fileDownloadUrl: \"\"})\n        })\n    }\n\n    upload = (event) => {\n        event.preventDefault();\n        this.dofileUpload.click();\n    }\n\n    makeCSV = (content) => {\n        let csv = '';\n        content.forEach(value => {\n            value.forEach((item, i) => {\n                let innerValue = item === undefined ? '' : item.toString();\n                let result = innerValue.replace(/\"/g, '\"\"');\n                if (result.search(/(\"|,|\\n)/g) >= 0) {\n                    result = '\"' + result + '\"'\n                }\n                if (i > 0) {csv += ','}\n                    csv += result;\n            })\n            csv += '\\n';\n        });\n        return csv;\n    }\n\n    openFile = (evt) => {\n        const fileObj = evt.target.files[0];\n        const reader = new FileReader();\n\n        if(!(fileObj instanceof Blob)) return\n\n        let fileloaded = e => {\n            const fileContents = e.target.result;\n            try {\n                let json = JSON.parse(fileContents);\n                if(Array.isArray(json)) {\n                    this.props.loadPointData(json);\n                } else {\n                    if(json.hasOwnProperty('lifts')) {\n                        this.props.loadPointData(json['lifts']);\n                    } else if(json.hasOwnProperty('slopes')) {\n                        this.props.loadPointData(json['slopes']);\n                    } else if(json.hasOwnProperty('restaurants')) {\n                        this.props.loadPointData(json['restaurants']);\n                    } else if(json.hasOwnProperty('points')) {\n                        this.props.loadPointData(json['points']);\n                    } else {\n                        alert('Malformed JSON data, please see Docs');\n                    }\n                }\n\n            } catch(e) {\n                alert(e);\n            }\n        }\n        fileloaded = fileloaded.bind(this);\n        reader.onload = fileloaded;\n        reader.readAsText(fileObj);\n    }\n\n    render() {\n        return (\n            <div id=\"fileForm\">\n                <Container className=\"justify-content-md-center\">\n                    <Row className=\"justify-content-md-center\">\n                        <Button onClick={this.upload} className=\"fileForm-child\">Upload</Button>\n                        <input type=\"file\" className=\"hidden\"\n                            multiple={false}\n                            accept=\".json,application/json\"\n                            onChange={evt => this.openFile(evt)}\n                            ref={e=>this.dofileUpload = e}/>\n\n                        <Form.Control as=\"select\" name=\"fileType\" className=\"fileForm-child\"\n                            onChange={this.changeFileType}\n                            value={this.state.fileType}>\n                            <option value=\"csv\">CSV</option>\n                            <option value=\"json\">JSON</option>\n                        </Form.Control>\n\n                        <Button onClick={this.download} className=\"fileForm-child\">\n                            Download\n                        </Button>\n                        <a className=\"hidden\"\n                            download={this.fileNames[this.state.fileType]}\n                            href={this.state.fileDownloadUrl}\n                            ref={e=>this.dofileDownload = e}>download it</a>\n                    </Row>\n                </Container>\n\n            </div>);\n    }\n}\n\nexport default FileForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dot from '../image-dots/Dot';\nimport InputModal from './InputModal.js';\nimport FileForm from './FileForm.js';\nimport Table from 'react-bootstrap/Table';\nimport {Button, Container, Row, Col, Dropdown, DropdownButton} from 'react-bootstrap';\n\nconst propTypes = {\n  deleteDots: PropTypes.func.isRequired,\n  addDots: PropTypes.func.isRequired,\n  resetDots: PropTypes.func,\n  dotStyles: PropTypes.object,\n  dotRadius: PropTypes.number,\n  backgroundImageUrl: PropTypes.string,\n  styles: PropTypes.object,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  pixelCoordinates: PropTypes.bool,\n};\n\nconst defaultProps = {\n  pixelCoordinates: true,\n  backgroundSize: 'cover',\n};\n\nexport default class ImageCoordinateCollector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grabbing: false,\n            dimensions: {},\n            currentDot: {},\n        };\n    }\n\n    onLoadPisteMap = ({target: img}) => {\n        this.setState({\n            dimensions: {\n                renderWidth: img.offsetWidth,\n                renderHeight: img.offsetHeight,\n                realWidth: img.naturalWidth,\n                realHeight: img.naturalHeight,\n            },\n            currentZoomLevel: 100,\n        });\n    }\n\n    onMouseUp = (e) => {\n        const bounds = e.target.getBoundingClientRect();\n        let {dimensions, currentDot} = this.state;\n        let x = Math.round(this.renderedToRealCoord(e.clientX - bounds.left, dimensions.renderWidth, dimensions.realWidth));\n        let y = Math.round(this.renderedToRealCoord(e.clientY - bounds.top, dimensions.renderHeight, dimensions.realHeight))\n        if(Object.keys(currentDot).length === 0) {\n            let dot = {\n                x: x,\n                y: y,\n                areaId: this.props.areaId,\n                items: []\n            };\n\n            this.setState({\n                grabbing: false,\n                showModal: true,\n                currentDot: dot,\n            });\n        }\n    }\n\n    updateCurrentDot = (dot) => {\n        let currentDot = this.state.currentDot;\n        this.setState({\n            currentDot: {...currentDot,...dot},});\n    }\n\n    moveDot = (index) => {\n        let dot = this.props.dots[index];\n        let dots = [...this.props.dots];\n        let indices = [];\n        let items = [];\n\n        dots.forEach((other, i) => {\n            if(other.x === dot.x && other.y === dot.y) {\n                indices.push(i);\n                items = [...items, {\n                    id: other.id,\n                    name: other.name,\n                    shortName: other.shortName,\n                    areaId: other.areaId\n                }];\n            }\n        });\n\n        dot = {\n            x: dot.x,\n            y: dot.y,\n            items: items,\n        };\n\n        this.setState({\n            grabbing: true,\n            currentDot: dot,\n            showModal: true,\n        });\n        this.props.deleteDots(indices);\n    }\n\n    resetDots = () => {\n        this.props.resetDots();\n    }\n\n    // Translate from rendered coordinates to real piste map coordinates\n    renderedToRealCoord = (coord, renderedLength, realLength) => {\n        return (coord/renderedLength)*realLength;\n    }\n\n    realToRenderedCoord = (coord, renderedLength, realLength) => {\n        return (coord/realLength)*renderedLength;\n    }\n\n    handleShowModal = () => {\n        this.setState({showModal: true});\n    }\n\n    handleCloseModal = () => {\n        this.setState({grabbing: false, showModal: false, currentDot: {}});\n    }\n\n    handleSave = (data) => {\n        let currentDot = this.state.currentDot;\n        this.setState({\n            currentDot: {...currentDot,...data},}, function() {\n                this.props.saveDot(this.state.currentDot);\n                this.handleCloseModal();\n            });\n    }\n\n    handleSelectZoom = (e) => {\n        this.setState(prevState => ({\n            currentZoomLevel: e,\n            dimensions: {\n              ...prevState.dimensions,\n              renderWidth: prevState.dimensions.realWidth * parseInt(e)/100,\n              renderHeight: prevState.dimensions.realHeight * parseInt(e)/100,\n            }\n        }));\n    }\n\n    render() {\n        const {grabbing, currentDot, currentZoomLevel} = this.state;\n        const dim = this.state.dimensions;\n        const {dots, backgroundImageUrl, dotRadius, resetDots} = this.props;\n        const grabClass = grabbing ? 'react-image-dot__grabbing' : '';\n\n        return (\n        <div id=\"react-image-dot\">\n\n            <div className={`react-image-dot__wrapper ${grabClass} no-select`}\n            onMouseUp={this.onMouseUp}\n            width={dim.realWidth}\n            height={dim.realHeight}>\n\n                <img\n                id=\"pistemap-img\"\n                src={backgroundImageUrl} alt=\"Piste map\"\n                width={dim.renderWidth} height={dim.renderHeight} onLoad={this.onLoadPisteMap} />\n\n                {dots.map((dot, i) =>\n                    <Dot\n                    dotX={Math.round(this.realToRenderedCoord(dot.x, dim.renderWidth, dim.realWidth))}\n                    dotY={Math.round(this.realToRenderedCoord(dot.y, dim.renderHeight, dim.realHeight))}\n                    i={i}\n                    styles={{\n                        boxShadow: '0px 0px 0px 2px lime',\n                        backgroundColor: 'magenta',\n                    }}\n                    moveDot={this.moveDot}\n                    dotRadius={dotRadius}\n                    key={i}\n                    />)}\n\n                {Object.keys(currentDot).length === 0 ? null: <Dot\n                    dotX={Math.round(this.realToRenderedCoord(currentDot.x, dim.renderWidth, dim.realWidth))}\n                    dotY={Math.round(this.realToRenderedCoord(currentDot.y, dim.renderHeight, dim.realHeight))}\n                    i={0}\n                    styles={{\n                        boxShadow: '0px 0px 0px 2px magenta',\n                        backgroundColor: 'lime',\n                    }}\n                    moveDot={() => console.log('try to move temp dot')}\n                    dotRadius={dotRadius}\n                    key={-1}\n                    />}\n            </div>\n            {\n                this.state.showModal ? <InputModal\n                dimensions={dim}\n                posX={this.realToRenderedCoord(currentDot.x, dim.renderWidth, dim.realWidth)}\n                handleClose={this.handleCloseModal}\n                handleSave={this.handleSave}\n                updateCurrentDot={this.updateCurrentDot}\n                currentDot={this.state.currentDot}\n                /> : null\n            }\n            <Container>\n                <Row>\n                    <Col>\n                        <DropdownButton title=\"Zoom\" id=\"dropdown-menu-zoom\" onSelect={this.handleSelectZoom}>\n                            {['50', '75', '100', '125', '150'].map(z =>\n                                <Dropdown.Item key={z} eventKey={z} active={currentZoomLevel === z}>{z}%</Dropdown.Item>\n                            )}\n                        </DropdownButton>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container className=\"dotsinfo text-center\">\n                <Row>\n                    <Col>\n                        number of points: {this.props.dots.length}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FileForm\n                            imgSrc={this.state.src}\n                            title={this.props.title}\n                            points={this.props.dots}\n                            loadPointData={this.props.loadPointData}/>\n                    </Col>\n                </Row>\n                <Row className=\"text-center\">\n                    <Col >\n                        <Table hover className=\"dotsinfotable\">\n                          <thead>\n                              <tr>\n                              <th>#</th>\n                              <th>id</th>\n                              <th>shortName</th>\n                              <th>x</th>\n                              <th>y</th>\n                              <th>name</th>\n                              <th>areaId</th>\n                              <th>edit</th>\n                              <th>delete</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                          {dots.map((dot, i) => {\n                              return (<tr key={i}>\n                                      <td>{i} </td>\n                                      <td>{dot.id}</td>\n                                      <td>{dot.shortName}</td>\n                                      <td>{dot.x}</td>\n                                      <td>{dot.y}</td>\n                                      <td>{dot.name}</td>\n                                      <td>{dot.areaId}</td>\n                                      <td><Button size=\"sm\" variant='outline-success' onClick={() => this.moveDot(i)}><b>✎</b></Button></td>\n                                      <td><Button size=\"sm\" variant='outline-danger' onClick={() => this.props.deleteDots([i])}><b>×</b></Button></td>\n                              </tr>);})}\n                          </tbody>\n                          </Table>\n                        </Col>\n                    </Row>\n                    <Row className=\"text-center\">\n                        <Col>\n                            <Button variant='success' onClick={() => resetDots()}>Reset</Button>\n                        </Col>\n                    </Row>\n\n            </Container>\n        </div>\n        );\n    }\n}\n\nImageCoordinateCollector.propTypes = propTypes;\nImageCoordinateCollector.defaultProps = defaultProps;\n","import '../styles/image-dots.css';\nimport React from 'react';\nimport ImageCoordinateCollector from './ImageCoordinateCollector.js';\nimport { Prompt } from 'react-router';\n\nclass MapCoordCollector extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.initialDots = [];\n        this.state = {\n            title: this.props.resort.title,\n            src: this.props.resort.src,\n            dots: this.initialDots,\n            windowWidth: window.innerWidth*0.98,\n            shouldBlockNavigation: false,\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.shouldBlockNavigation) {\n            window.onbeforeunload = () => true\n        } else {\n            window.onbeforeunload = undefined\n        }\n    }\n\n    // Translate from rendered coordinates to real piste map coordinates\n    renderedToRealCoord(coord, renderedLength, realLength) {\n        return (coord/renderedLength)*realLength;\n    }\n\n    realToRenderedCoord(coord, renderedLength, realLength) {\n        return (coord/realLength)*renderedLength;\n    }\n\n    addDots = (dots) => {\n        let old = this.state.dots;\n        this.setState({\n            dots: [...old, ...dots],\n            shouldBlockNavigation: true,\n        });\n    }\n\n    saveDot = (dot) => {\n        let {dots} = this.state;\n        this.deleteDots([dots.length-1]);\n\n        let newDots = dot.items.map((item, i) => {\n            let obj = {\n                x: dot.x,\n                y: dot.y\n            }\n            return {...obj,...item}\n        });\n        this.addDots(newDots);\n        this.setState({areaId: dot.items[0].areaId});\n    }\n\n    deleteDots = (indices) => {\n        this.setState({\n            dots: this.state.dots.filter((e, i) => !indices.includes(i)),\n        });\n    }\n\n    resetDots = () => {\n        this.setState({\n            dots: this.initialDots,\n        });\n    }\n\n    handleResize = () => {\n        this.setState({ windowWidth: window.innerWidth*0.98 });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n    }\n\n    loadPointData = (data) => {\n        let dots = data.map(point =>\n            ({  id: point.id,\n                name: point.name,\n                shortName: point.shortName,\n                areaId: point.areaId,\n                x: point.pisteMapCoordinates ? point.pisteMapCoordinates.x : 0,\n                y: point.pisteMapCoordinates ? point.pisteMapCoordinates.y : 0\n            })\n        );\n        this.initialDots = dots;\n        this.setState({dots: dots});\n    }\n\n    render() {\n        const { dots, src} = this.state;\n\n        return (\n            <div id=\"matcher\">\n\n                <Prompt\n                  when={this.state.shouldBlockNavigation}\n                  message='You have unsaved changes, are you sure you want to leave?'\n                />\n                <ImageCoordinateCollector\n                backgroundImageUrl={src}\n                title={this.state.title}\n                onLoadMap={this.onLoadPisteMap}\n                dots={dots}\n                deleteDots={this.deleteDots}\n                saveDot={this.saveDot}\n                addDots={this.addDots}\n                resetDots={this.resetDots}\n                dotRadius={10}\n                areaId={this.state.areaId}\n                loadPointData={this.loadPointData}\n                />\n            </div>);\n    }\n}\n\nexport default MapCoordCollector;\n","const images = [\n    { id: 0, src: './assets/are.png', title: 'Åre'},\n    { id: 1, src: './assets/bjornen.png', title: 'Åre Björnen'},\n    { id: 2, src: './assets/duved.png', title: 'Duved'},\n    { id: 3, src: './assets/bjornrike.png', title: 'Björnrike'},\n    { id: 4, src: './assets/vemdalsskalet.png', title: 'Vemdalsskalet'},\n    { id: 5, src: './assets/hemsedal.png', title: 'Hemsedal'},\n    { id: 6, src: './assets/salen-lindvallen.png', title: 'Lindvallen'},\n    { id: 7, src: './assets/salen-hogfjallet.png', title: 'Högfjället'},\n    { id: 8, src: './assets/salen-hundfjallet.png', title: 'Hundfjället'}\n];\n\nexport default images;\n","import React from 'react';\nimport {Container, Row} from 'react-bootstrap';\n\nfunction Docs(props) {\n    return (<div id=\"docs\" >\n                <div className=\"page-content\">\n                    <h1>\n                        Documentation\n                    </h1>\n\n                    <ul>\n                        <li>\n                            Start by selecting a piste map from the drop down field or uploading a map using the file upload button\n                        </li>\n                        <li>\n                            Clicking <b>Start</b> will take you to the <b>matching view</b>. Here, you can click on the map to add a new point.\n                        </li>\n                        <li>\n                            When a new point is added, the input modal is shown. Here you can make adjustments to the (x, y) coordinate, the id, name, shortName, and areaId. Click on save to save the point.\n                        </li>\n                        <li>\n                            You can also upload an existing JSON file in the <b>matching view</b>. This will load the data in the file and render the points. You can make changes, and then download the updated version using the <b>Download</b> button.\n                        </li>\n                    </ul>\n\n                    <br/>\n\n                    <Container>\n                    <Row><h2>File structure</h2></Row>\n                    <Row>\n                    <div className=\"json-snippet\">\n                        <pre>{JSON.stringify({\n                        \"points\": [\n                            {\n                                \"id\": \"193\",\n                                \"name\": \"Adam\",\n                                \"shortName\": \"1\",\n                                \"areaId\": \"lindvallen\",\n                                \"pisteMapCoordinates\": {\n                                    \"x\": 145,\n                                    \"y\": 537\n                                }\n                            },\n                            {\n                                \"id\": \"194\",\n                                \"name\": \"Pernilla\",\n                                \"shortName\": \"2\",\n                                \"areaId\": \"lindvallen\",\n                                \"pisteMapCoordinates\": {\n                                    \"x\": 281,\n                                    \"y\": 535\n                                }\n                            }\n                        ]}, null, 2)}</pre>\n\n                    </div>\n                    </Row>\n                    </Container>\n                </div>\n            </div>\n    );\n}\n\nexport default Docs;\n","import React from 'react';\n\nfunction About(props) {\n    return (<div id=\"about\" >\n                <div className=\"page-content\">\n                    <h1>\n                        About\n                    </h1>\n                    <p>\n                        <b>Created by:</b> Lou-Lou Pei <br/>\n                        <b>Why:</b> To aid in the coordinate collection process of piste maps. <br/>\n                        <a href=\"https://github.com/ellpei/coordinate-collector/issues\">Submit an issue</a>\n                    </p>\n                </div>\n            </div>\n    );\n}\n\nexport default About;\n","import './styles/App.css';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MapForm from './mapForm.js';\nimport MapCoordCollector from './mapcoords-only/MapCoordCollector.js';\nimport images from './images';\nimport Docs from './docs.js';\nimport About from './about.js';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport {\n    HashRouter as Router,\n    Link,\n    Switch,\n    Route,\n    Redirect,\n  } from \"react-router-dom\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            resortObject: null,\n            useGeoCoords: true,\n        };\n    }\n\n    setResort = (choice, useGeoCoords) => {\n        this.setState({\n            resortObject: images[choice],\n            useGeoCoords: useGeoCoords\n        });\n    }\n\n    uploadMap = (file, useGeoCoords) => {\n        let filename = file.name;\n        let title = filename.substr(0, filename.lastIndexOf('.'));\n        this.setState({\n            resortObject: { src: file.url, title: title},\n            useGeoCoords: useGeoCoords,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router basename=\"/\">\n                    <Navbar className=\"navbar\" bg=\"light\" variant=\"light\">\n                        <Link className=\"navbar-brand\" to=\"/\">\n                            <div className=\"header\">\n                                <h1>Coordinate Collector</h1>\n                            </div>\n                        </Link>\n                        <Nav className=\"mr-auto\">\n                            <Link className=\"nav-link\" to=\"/docs\">Docs</Link>\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\n                        </Nav>\n                        { this.state.resortObject ?\n                            <Navbar.Text>\n                                {this.state.resortObject.title}\n                            </Navbar.Text> : null }\n\n                    </Navbar>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <MapForm\n                            resorts={images}\n                            onSelect={this.setResort}\n                            onUpload={this.uploadMap}/>\n                        </Route>\n                        <Route path=\"/docs\">\n                            <Docs />\n                        </Route>\n                        <Route path=\"/about\">\n                            <About />\n                        </Route>\n                        <Route path=\"/matcher\">\n                        {(() => {\n                              if (!this.state.resortObject)\n                                 return <Redirect to={{ pathname: '/', state: { from: this.props.location } }} />\n                              else\n                                 return <MapCoordCollector resort={this.state.resortObject}/>\n                          })()}\n                        </Route>\n                    </Switch>\n                </Router>\n            </div>\n        );\n    }\n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}